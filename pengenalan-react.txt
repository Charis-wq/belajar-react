Kenapa Butuh Framework 
agar ada standarisasi saat membuat project terutama saat kita bekerja dengan tim
tanpa adanya framework maka setiap orang akan membuata kode dengan gaya masing-masing

Component
saat belajar rect kita harus terbiasa dengan istilah Component
component adalah kumpulan kode yang bisa digunakan secara independen 
component bisa berisikan satau atau lebih HTML element, kode javascript dan CSS
tidak ada aturan harus seberapa kecil atau besar sebuah component
anggapa saja seperti membuat function kita bisa membuat function yang besar atau kecil karena tujuan function adalah agar bisa di gunakan berulang begitu pula component 
struktur component mirip seperti DOM(Document Object Model) dimana kita bisa membuat component di dalam component lain

JSX
rect menggunakan jsx ketika membuat component 
jsx(javascript XML atau javascript syntax extension), adalah kombinasi kode javascript dan xml (HTML), dimana kita bisa membuat componenet dengan mudah menggunakan kode xml dan javascript dalam satu file 
jsx diperkenalkan oleh facebook di react mnamun saat ini jsx sudah banyak di adopsi oleh banyak framewrok javascript lainnya

Membuat Component
biasanya,component akan dibuat dalam satu file jsx dengan nama sesuai dengan nama komponennya
misalkan kita akan membuat  component bernama HelloWorld 
maka kita bisa membuat file HelloWorld.jsx
selanjutnya kita perlu membuat default function dengan nama componentnya yaitu HelloWorld
return daru function tersebut adalah element UI yang akan ditampilkan 

Menapilkan Component
untuk menampilkan component diperlukan instance ari react root
kita bisa membuat react root menggunakan method creatroot(element)
selanjutnya untuk menapilkan component di react root kita bisa mengunakan method render(component)
untuk membantu mencari masalah saat development react menyadiakan component stricmode kita bisa menggunakan stricmode untuk menapilkan component di root 

Component
react component mendukung semua elemen HTML dan SVG
jadi kita tidak perlu khawatir membuat component karena semua element pasti didukung 

Multiple Component
sebelumnya kita membuat satu file JSX untuk satu component 
walaupun itu adalah praktek yang baik tapi itu bukan berarti wajib dilakukan 
component sebenarnya adalah sebuah function yang mengembalikan react element oleh karena itu jika kita ingin membuat component kita hanya cukup membuat function yang mengembalikan react element

Kenapa JSX/TSX
web dibuat menggunakan HTML,CSS dan Javascript biasanya kita akan menyimpan konten di HTML desain di CSS dan logika aplikasi di javascript dan biasanya kita akan simpan file-file yang terpisah 
tapi saat ini web sudah interaktif seringnya konten HTML di tampilkan berdasarkan logika aplikasi di javascript
oleh karean itu react melakukan logika aplikasi dan membuat konten disatu tempat yang sama yaitu JSX

Mengubah HTML Ke JSX/TSX
saat mengubah kode HTML ke JSX/TSX kita tidak bisa mengubah semudah copy paste kodenya 
JSX/TSX memiliki aturan yang lebih ketat di bandingkan HTML contohnya saat menggunakan tag element wajib menggunakan tag tutup
misalkan kita tidak bisa menggunakan <img src="">
maka kita harus menggunakan tag tutup ketika menggunakan JSX/TSX
<img src=""/>
beberapa attribute di tag element pun berbeda. 

Aturan JSX/TSX
component hanya boleh mengambalikan satu element jika kita ingin mengembalikan beberapa element kita harus membungkus dalam parent element 
wajib menutup semua tag element 
attribute menggunakan camelCase attribute di element JSX akan di konversi ke variabel javascript oleh karena itu nama attribute harus mengikuti cara pembuatan nama variabel di javascript yaitu tidak bisa menggunak -(strip) karena keterbatasan ini kebanyakan atributte di element jsx akan menggunakan camelCase contohnya className(bukan class-name). 

JSX Converter 
jika misal kita sudah punya kode HTML dan ingin mengkonversi ke jsx 
disarankan menggunakan converter sehingga kita tidak perlu lakukan secara manual lagi.

Javascript di JSX
terkadang ada kasus dimana kita ingin mengakses kode javascript di jsx
pada kasus ini kita bisa menggunakan kurung kurawal untuk mengakses kode javascript di jsx

Kurung Kurawal di JSX 
penggunaan kurung kurawal di jsx hanya bisa di lakukan pada dua lokasi 
sebagai teks seperti pada contoh  
sebagai nilai attribut pada tag element misal<img src= [location]/>

Kurung kurawal Doubel pada JSX 
pada beberapa attribute contohnya style kita bisa menggunakan javascript object sebagai parameter 
oleh karena itu kadang sekilas terlihat seperti kurung kurawal doubel, padahal sebenarnya hanya satu kurung kurawal dan datanya adalah javascript object 

Props/Properties
react component menggunakan props untuk berkomunikasi 
parent component bisa mengirim informasi ke child component dengan menggunakan props 
props itu mirip attribute di HTML element tapi bisa mengirim nila javascript seperti object,array,function atau yang lainnya 

Menambahka Props 
untuk menambahkan properties pada component kita hanya perlu menambahkan paramater object pada function di component
parameter props tersebut merupkan javascript object sehingga kita bisa mengakses detail attribute yang dikirim dari parent melalui props

Deastructuring Props
salah satu yang bisa di lakukan oleh programer react adalah, melakukan destructuring parameter pada props
hal ini untuk mempermudah ketika membaca,sehingga kita tahu attribute apa yang tersdia pada component tersebut 
karena props adalah javascript object jadi kita juga bisa menambahkan fitur seperti default value pada props.

Mengirim Props
untuk mengirim props kita bisa menggunakan attribute seperti HTML element ketika menggunakan component

Spread Syntax 
terkadang mengirim props dari parent component ke child component sangat merepotkan 
jika kita hanya ingin melakukan forward semua props ke child component kita bisa menggunakan spread syntax

Nasted Component
jsx mendukung pembuatan nasted component 
hal ini memungkinkan kita bisa membuat component yang didalamnya bisa ditambahkan component lain secara dinamis 
agar component bisa memiliki component lain didalamnya kita bisa menggunakan attribute children pada props
misalkan sekarang kita akan membuat component bernama container dan didalmnya kita bisa berisi copmonent lainnya

Style 
Css sendiri bukan bagian dari JSX,jika kita ingin membuat style CSS maka kita perlu buat dalam file Css atau langsung di attribute style menggunakan kurung kurawal double 
namun sekarang kita akan mencoba dalam file Css
menggunakan style pada jsx tidak menggunakan attribute class melainkan className

Conditional
saat kita membuat halaman web sering sekali kita menampilkan tampilan berbeda pada kondisi tertentu
hal ini juga bisa dilakukan di jsx 
kita bisa menambahkan kondisi menggunakan javascript dan mengembalikan component yang berbeda bedasarkan kondisi yang diinginkan 
contohnya kita akan membuat halaman todolist dan jika todo nya sudah selesai 
kita akan mencoret element teksnya

Null component
pada kasus tertentu mungkin ada kondisi dimana kita ingin mengembalikan component atau tidak ingin mengembalikan component apapun
kita bisa mengembalikan null untuk menandai bahwa tidak ada component yang kita kembalikan

Tenary Operator 
terkadang pada kasus yang lebih sederhana kita bisa menggunakan tenary operator  javascript di jsx

Logical AND 
di beberapa kasus yang lebih sederhana terkadang di jsx sering memanfatkan logical AND di javascript
misalkan jika kondisi terpenuhi maka akan menampilkan jika tidak maka tidak akan menampilkan

Collection Component
kita pasti akan sering menampilkan component yang sama berkali-kali sesuai koleksi data jsx sendiri tidak memilkik fitur perulangan 
untuk menampilkan multiple component sama seperti conditional kita akan memanfatkan javascript 
kita bisa menggunakan javascript array untuk mengubah data array menjadi component misal menggunakan method map() pada array 
misalkan sekarang kita akan mencoba ubah data todolist menjadi array

Component Key
jika kita perhatikan di text editor mungkin kita akan melihat pesan peringatan: "Mising key prop for element in iterator"
saat membuat colection component tiap component diperlukan id(unique string atau number) menggunakan atribute key
kenapa butuh component key? hal ini agar react bisa mengenali component ketika berubah sperti posisinya diubah dihapus atau ditambahkan pada colection biasanya component key akan di ambil dari data sehingga  lebih konsisten

Pure Function
dalam pemograman kita mengenal yang namanya Pure Function
sebuah function kita sebut sebagai pure function jika memenuhi dua kriteria berikut:
function akan mengembalikan nilai yang sama untuk nilai parameter yang sama 
funtion tidak memiliki efek samping tidak ada perubahan pada variabel non local(variabel yang berada diluar function)

Pure Component
react mengasumsikan bahwa setiap component yang kita buat adalah pure function 
ini berati bahwa react component yang kita buat harus selalu mengembalikan JSX yang sama dengan input yang sama
walaupun sebenarnya kita bisa saja membuat react component yang tidak pure tapi sangat tidak disarankkan karana setiap memanggil component dengan input yang sama bisa menghasilkan nilai yang tidak konsisten 
kita akn membuat contoh react component yang tidaka pure

Membuat Pure Component 
kita harus menghapus efek samping dari component contohnya kita bisa pindahkan variabel conter menjadi local variabel di Table dan gunakan props sebagai conternya

Dimana bisa melakukan efek samping?
react menyediakan tempat khusus jika ingin membuat component yang bisa menghasilkan efek samping 
efek samping dari component biasanya ditempatkan di event handler,yaitu aksi yang terjadi ketika kita berinteraksi dengan component 
atau ketika kita misalkan component tergantung dengan external system(misal API), maka react menyediakan function useEffect()

Event Handler 
seperti yang sudah kita tahu bahwa di HTML element kita bisa menambahkan event handler
sama juga dengan rect component kita juga bisa menambahkan event handler pada element di react component
ada banayak sekali jenis event handler yang bisa kita tambahkan kita bisa lihat di halaman referensi react  component

Menambah Event Handler
unutk menambahkan event handler bisanya kita akan tambahkan function sebagai handlernya 
bisa dalam bentuk anonimous function arrow function atau membuat function terlebih dahulu didalam scope componentnya
nama function untuk handler biasanya diawali dengan nama "handle" dan diikiuti dengan jenis event handler, misalkan handleClick(), handlemousEnter(), dan alain-lain

Membaca Props di Event Handler
salah satu keuntungan membuat function event handler didalam component adalah,kita bisa membaca props yang di gunakan oleh component tersebut

Event Handler sebagai Props
seperti yang di materi props sebenarnya adalah javascript object
kita tahu bahwa javascript object bisa memiliki attribute dengan tipe function 
oleh karena itu kita juga bisa membuat event handler biasanya nama attributenya akan diawali dengan "on" misal onSmash, onHit dan lain-lain

Event Object 
saat kita membuat event handler function kita bisa menambahkan event object sebagai parameter di function tersebut
react event object kompatible dengan standard DOM event object

Event Propagation
event di react component akan selalu di sebarkan ke component yang ada di atasnya(event propagation)
misalkan kita memiliki div dengan event onClick lalu didalamnya kita memiliki button dengan event onClick
ketika button di click maka onClick di button akan dipicu dan selanjutnya onClick di div juga akan dipicu
kadang mungkin kita tidak ingin hal itu terjadi maka kita bisa hentikan proses event propagation tersebut menggunakan method stopPropagation()

Prevent Default 
selain menghentikan event propagation hal yang biasa kita lakukan keetika membuat event handler adalah menghentikan default action menggunakan preventDefault()
misalkan kita membuat from keetika di picu event onClick kita ingin hentikan default action from submit

Side Effect 
apakah component boleh memiliki side effect (efek samping)
tentu saja boleh namun biasanya side effect terjadi karena  aanya interaksi dari pengguna melalui event handler
misal kita akan membuat form say hello dimana ketika button di klik kita ingin menampilkan hello + nama pada text

DOM Manipulation
kode sebelumnya kita menggunakan DOM manipulation untuk mengubah component di react 
hal ini sebenarnya tidak terlalu direkomendasikan terutama jika misal data yang memicu perubahan element di component bersumber dari berbagai event handler
oleh karena itu hal yang direkomendasikan adalah menggunakan state yang akan kita bahas

Hooks
jooks adalah fitur di rectyang bisa digunakan dicomponent 
ada banyak sekali fitur yang isa kita gunakan di react hooks  

State 
component kadang perlu untuk berubah dikarenakan interaksi yang dilakukan pengguna 
misal,input di klik bisa menaikan data counter, tombol next bisa gambar banner yang sedang muncul dan lain-lain 
di react memori sppesific di component disebut state

State Menggunakan Local variabel Biasa 
apakah local variabel biasa di component bisa digunakan untuk state? sayangnya hal ini tidak bisa dilakukan 
ketika rect melakukan render componnent untuk yang kedua kali dan seterusnya maka semua kode component akan dieksekusi ulang oleh karena itu lpcal variabel akan kembali ke nilai awal
peribahan di local variabel juga tidak akan memicu render ulang component

useState
untuk membuat state kita bisa menggunakan function useState(initial)
function useState akan mengembalikan array dengan 2 nilai pertama adalah statenya dan yang kedua ada function untuk mengubah value di state tersebut 
cpomponet yang menggunakan state tersebut secara otomatis akan di render

State Terisolasi dan Private
state merupakan data yang terisolasi dan private secara local terhadap component yang menggunakan
artinya jika me-render component yang samaberkali-kali maka state dari tiap component tersebut akan terpisah satu sama lain

Render 
sebelum component ysng kita buat dtampilkan dilayar component harus dirender oleh react oleh karena itu kita perlu tahu bagaimana cara kerja proses react ini ketika menampilkan component yang kita buat
terdapat 3tahapan proses menampilkan component di react
1: trigger(memicu) proses render
2: melakukan proses render component
3: menempatkan hasil render component ke DOM(document object model) 

Trigger Render
pemicu render bisanya terjadi karena dua hal
pertama adalah inisialisasi awal component yang kita akukan menggunakan method render()
kedua adalah ketika ada pemicu perubahan state
seetiap terjadi perubahan state secara otomatis react akan mengirimkan antrian untuk memicu proses render ulang

Render Component 
setelah proses trigger render terjadi react akan memanggil component  yang kita buat untuk mencari tahu apa yang harus ditampilkan dilayar 
render adalah proses react memanggil component yang kit6a buat 
pada proses inisaialisasi awal react akan memanggil root component(paling atas)
pada saat render ulang react hanya  akan memanggil ulang component yang state nya berubah 
setelah proses render selesai react akan melakukan proses commit

Commit Changes
setelah proses rendere selesai react akan melakukan proses commit changes(menyimpan perubahan) ke DOM
unutuk inisialisasi awal karena baru pertama kali artinya element di DOM belum ada,maka react akan menggunakan appendChild() untuk menambahkan elemen ke DOM
sedangkan untuk proses render ulang react akan mencoba melakukan perubahan seminimal mungkin untuk menyamakan DOM saat ini dengan hasil rendering
react hanya akan mengubah element di DOM jika memang elment tersebut berbeda hasil dari rendering

Snapshot 
variabel state sdekilas mungkin terlihat seprti variabel javascript biasa 
tapi sebenarnya state itu mirip snapshot(kondis saat itu),mengubah nilai variabel state tidak akan mengubah snapshot melainkan akan memicu render ulangan untuk membuat snapshot baru 
kita mungkin berfikitr bahwa tampilan web berubah secara langsung karena response dari event yang dilakukan oleh pengguna seperti klik tombol
namun sebenarnya tidak seperti itu kita sudah tahu dimateri sebelumnya ketika terjadi perubahan state itu akan memicu render ulang sehingga akan membuat snapshot baru yang ditampilkan dilayar

Keslahan Mengubah State
paham tentang snapshot ini akan memberi gambaran cara pandang kita terhadasp data di state 
berikut ini adalah contoh kesalahan yang bisa  dilakuakan ketika mengubah state 
kita berfikir jika mengubah state saat itu juga data akan berubah padahal mengubah state sebenarnya hanyalah  mentrigger render ulang dengan nilai state yang baru 

Kenapa Counter Tidak Berubah 3X?
hal ini dikarenakan setCounter() tidak akan mengubah data counter yang ada di snapshot saat ini 
setCounter() hanya akan melakukan render ulang dengan data counter yang baru
saat kita memanggil setCounter() sebanyak 3X buakan berarti react kana melakukan render ulang sebanyak 3X react akan menunggu samapai event handler selesai jika ada perubahan state maa akan dilakukan render ulang 
artinya render ulang akan dilakukan sekali saja walaupun kita mengubah state berkali-kali 

State Update
seperti sebelumnya dibahas, melakukan update state berkali-kali tidak akan mengubah data state di snapshot saat itu melainkan hanya memicu untuk render ulang dengan data state baru 
tapi kadang-kadang kita memang mungkin ada keperluan untuk mengubah data di state yang sama berkali-kali
dan jika kita memang ingin mengubah data state dengan data  yang harapannya sudah diubah sebelumnya (walaupun belum di render ulang) 
kita bisa menggunakan lambda sebagai parameter ketika memanggil function untuk update data state

Object di State
state bisa menyimpan jenis data javascript apapun termasuk object
tapi kita tidak disarankan untuk mengubah object di state kita disarankan, membuat object baru lalu mengubah data di state tersebut dengan object

Immutable Data  
saat kita membuat data di state kita harus memperlakukan data di state sebagai immutable data(tidak bisa berubah)
artinya data di state hanya dgunakan untuk dibaca(read only)
jika kita ingin mengubah data di state maka kita harus ubah mengguakan data baru yang artinya data lama tidak dimodifikasi
ini adalah praktek yang biasa dilakukan di react walaupun pada kenyataannya object di javascript tidak immutable
hal ini direkomendasikan agar kita  tidak salah mengubah data langsung padahal kita tahu bahwa mengubah data tidaka akan memicu proses render ulang 
untungnya dijavascript kita bisa menggunakan spread syntax untuk membantu meng-copy attribute di object 

Nested Object
kadang ada kasus kita menggunakan nested object 
sama seperti sebelumnya kita disarankan untuk selalu membuat object  baru ketika mengubah state 
kadang memang menyulitkan nested objectnya terlalu besar oleh karena itu disarankan tidak terlalu dalam membuat nested 

Immer Liberary
saat satu liberarysering digunakan ketika aplikasi menggunakan react adalah Immer
immer adalah liberary yang digunakan untuk membuat immutable object dari object saat ini
menggunaka immer akan lebih mudah dibandingkan menggunakan spread syntax terutama untuk object yang kompleks dan nested

Use Immer Liberary
liberary immer juga bisa diintegrasikan dengan react state dengan mudah 
kita  bisa menggunakan liberary Use-immer
kita cukup mengganti useState() menjadi useImmer()
dan untuk mengupdate object di state kita bisa menggunakan function sebagai parameter di update methodnya

Menambahkan Liberary Immer
npm install immer use-immer

Array di State
sama seperti object array di state juga harus kita perlakukan sebagai immutable data
artinya operasi menambah data mengubah data atau menghapus data di array kita harus buat array baru di update ke state 
hal ini memang agak menyilitkan oleh karena itu dengan bantuan liberary seperti Immer hal ini jadi lebih mudah

Mengubah Array 

                hindari          gunakan
menambahkan     push,unshit      contact,[..arr] spraed syntax
menghapus      pop,shift,splice  filter,splice
mengubah       splice,arr[i]     map
mengurutkan    reverse,sort      buat array baru  

Sharing State
kadang kita ingin membuat state untuk beberapa component yang selalu berubah bersama-sama atau sederhananya adalah sharing(berbagi) state 
untuk melakukan hal ini kita harus mengubah lokasi state dari component-component itu, ke parent component mereka,lalu kita kirim statenya melalui props 
misalkan pada from task sebelumnya kita akna buat 2 child component, component untuk TaskFromnya dan component untuk Tasklistnya
kita akan share statenya dari Task ke TaskFrom dan Tasklist melalui props

Mepertahankan State 
state terisolasi antar component react melacak state mana yang dimiliki oleh component berdasarkan di struktur UI
kita bisa mengatur kapan kita ingin mempertahankan state kapan kita akan mereset state 
state sendiri tidak disimpan didalam component state itu disimpan di react sedangkan ketika kita  menggunakan state di component maka sebenarnya kita akan menggunakan state yang ada di react 
cara react bisa tahu di state mana yang digunakan oleh component adalah melihat posisi component di struktur UI 


Posisi Component
seperti yang dijelaskan sebelumnya,react menyimpam state sesuai dengan posisi Component
ketika posisi component berubah misala hilang dari tampilan layar
secara otomatis state akan dihapus dari react 
misalkan kita akan membuat component counter bisa dihilangkan 
ketika nanti component tersebut dihilangkan dari tampilan mana secar otomatis statenya juga akan hilang  

Component Sama di Posisi Sama
jika terdapat kasus menampilkan component yang sama
tapi secara struuktur UI dia berada di posisi yang sama 
maka state akan dipertahankan oleh react yang artinya tidak akan dihapus
hal ini mungkin akan membingungkan tapi kita harus mengerti hal ini karena react akan menyimpan informasi state mengikuti posisi component jika rreact akan menyimpan informasi state mengikuti posisi component jika componentnya sama dan posisi sama maka state akan dipertahankan

Kenapa State Masih Sama?
hal ini terjadi secara struktur UI posisi component ada di posisi yang sama 
jika posisi component dan jenis componentnya sama secara otomtis react akan mempertahankan state 
kecuali posisinya berubah atau componentnya berbeda maka react akan menghapus statenya 

Reset State 
sekarang kita tahu bagaimana react mempertahankan data state 
lantas bagaimana jika misal pada kondisi tertentu kita memang ingin melakukan reset state tidak mau mempertahankan statenya?
ada beberapa cara untuk mereset statenya
yang pertama dengan menghapus component dari tampilan UI
ketika component hilang dai tampilan UI secara otomatis state akan ikut hilang

Mengubah Dengan Component lain
selain menghapus component kita juga bisa menghapus component dengan component diposisi yang sama 
ketika posisi yang sama masih ada struktur UI tapi componentnya berbeda secara otomatis state juga akan direset
misalkan sebelumnya kita  menampilakna component counter lalu kita ubah menjadi element paragraph secara otomatis state di component counter akan dihapus 

Mengubah Posisi Component
kaarena react akan menyimpan state sesuai dengan component dan posisinya 
artinya jika posisi component diubah atau dipindahkan secara otomatis state juga akan direset

Posisi Component Berbeda 
selain mengubah posisi kita juga bisa jika component sama berada di posisi yang berbeda secara  otomatis statenya juga akan berbeda
ini mungkin akan membingungkan karena secara DOM mungkin posisinya sama tapi secara di comonent berbeda

Menggunakan Key
cara yang umum biasanya digunakan untuk mereset state yaitu menambahkan key pada component 
saat component yang sama ditampilkan diposisi yang sama jika key-nya berbeda maka akan dianggap component yang berbeda dengan demikian secara ototmatis state akan di reset 
ini mungkin cara yang paling direkomndasikan dibanding harus mengubah-ubah posisi component

Reducer
Hooks State Reducer
sebelumnya kita sudah bahas banyak tentang hooks state menggunakan useState()
selain itu terdapat fitur hooks state lain yaitu Reducer
menggunakan useReducer() 

Reducer
pada kasus kita membuat component yanga memiliki banyak proses update state kadang akan menyulitakan untuk memaintain-nya karana terlalu banyak event handler yang harus dibuat juga untuk mengubah data statenya 
pada kasus seperti ini kita bisa mengkonsolidasi semua logic untuk update state di sebuah function di luar component atau kita sebut reducer 
agara ada gambaran kita akana coba membuat component dengan state yang banya diupdate tanpa menggunakan reducer terlebih dahulu nantui kita akan ubah menjadi menggunakan reducer

Menggunakan Reducer
sekarangbkita akan fokus ke NoteApp.tsx 
kita bisa lihat bahwa terdapat 3 aksi untuk update note ada add upsate dan delete dan itu semua disimpan didalam function yang berbeda-beda dari eventhandler yang berbeda-beda
menggunakan reducer agak sedikit berbeda dengan menambahkan state secara langsung alih-alih memberi tahu ke react apa yang harus dilakukan dengan mengubah state menggunakan reducer kita memberitahu react apa yang sudah dilakukan pengguna(action)
implementasi logic dari actionnya dilakukan ditempat yang terpisah

Membuat Reducer Function
reducer function adalahh kode dimana kita menyimpan logic kita
reducer function memiliki 2 parameter, state saat ini dan action object
return functionnya adalah state selanjutnya

Menggunakan Immer
liberary useImmer juga mendukung reducer sehingga kita bisa lebih mudah karena kita bisa mengedit data draft dibanding membuat data baru dari state yang ada
kita bisa menggunakan method useImmerReducer()
